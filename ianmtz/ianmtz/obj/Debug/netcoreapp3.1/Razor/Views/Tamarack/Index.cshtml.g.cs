#pragma checksum "/Users/ianmartinez/GitHub/ianmtz/ianmtz/ianmtz/Views/Tamarack/Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "5be6847b4ad313d88c784436471d0f002973cfb8"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Tamarack_Index), @"mvc.1.0.view", @"/Views/Tamarack/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "/Users/ianmartinez/GitHub/ianmtz/ianmtz/ianmtz/Views/_ViewImports.cshtml"
using ianmtz;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/Users/ianmartinez/GitHub/ianmtz/ianmtz/ianmtz/Views/_ViewImports.cshtml"
using ianmtz.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"5be6847b4ad313d88c784436471d0f002973cfb8", @"/Views/Tamarack/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"fcc87c3596b3b9c53a8561dbec0f73d42bfe13b6", @"/Views/_ViewImports.cshtml")]
    public class Views_Tamarack_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/img/Tamarack/Icon.png"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("featurette-image"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/img/Tamarack/HelloWorld.jpg"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/img/Tamarack/DarkMode.gif"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/img/Tamarack/Stacks.gif"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "/Users/ianmartinez/GitHub/ianmtz/ianmtz/ianmtz/Views/Tamarack/Index.cshtml"
  
    Layout = "_AppLayout";
    ViewData["Title"] = "Tamarack";

#line default
#line hidden
#nullable disable
            WriteLiteral("\n");
            DefineSection("icon", async() => {
                WriteLiteral("\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5be6847b4ad313d88c784436471d0f002973cfb85132", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\n");
            }
            );
            WriteLiteral("\n");
            DefineSection("description", async() => {
                WriteLiteral(@"
    <p class=""appDescriptionText"">
        A collection of modern, easy to use classes for designing a UI in pure JavaScript. 
    </p>

    <div class=""appButtons"">
        <a class=""btn btn-primary imageButton"" href=""https://github.com/ianmartinez/tamarack"" role=""button"">
            <ion-icon name=""logo-github""></ion-icon><span>GitHub</span>
        </a>
    </div>
");
            }
            );
            WriteLiteral("\n");
#nullable restore
#line 22 "/Users/ianmartinez/GitHub/ianmtz/ianmtz/ianmtz/Views/Tamarack/Index.cshtml"
Write(await Html.PartialAsync("~/Views/Shared/_SyntaxHighlighter.cshtml"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"

<div class=""container appFeatures"">
    <div class=""row featurette"">
        <div class=""col-md-9"">
            <h2 class=""featurette-heading"">Hello World</h2>

            <div class=""featuretteDescription"">
                <p class=""lead"">
                    A simple hello world demo in Tamarack.
                </p>

                <pre class=""codeContainer"">
                    <code class=""js"">
                        new TkText(""h1"", { parent: ""body"", text: ""Hello World!"" });
                    </code>
                </pre>
            </div>
        </div>

        <div class=""col-md-3"">
            <div class=""imgContainer"">
                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5be6847b4ad313d88c784436471d0f002973cfb87739", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("lightbox", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </div>
        </div>
    </div>

    <hr class=""featurette-divider"">

    <div class=""row featurette orderFlip"">
        <div class=""col-md-9"">
            <h2 class=""featurette-heading"">Detect dark mode</h2>

            <div class=""featuretteDescription"">
                <p class=""lead"">
                    Easily add event handlers to watch for switches between light
                    and dark mode.
                </p>

                <pre class=""codeContainer"">
                    <code class=""js"">
                        // Insert a text element into &lt;body&gt;
                        let modeText = new TkText(&quot;h1&quot;, { parent: &quot;body&quot; });

                        // Update the text and document colors when the system is 
                        // switched between dark and light mode
                        function updateMode() {
                            if (TkDocument.isInDarkMode()) {
                                document.body.style.backgroundColor = &quot;b");
            WriteLiteral(@"lack&quot;;
                                document.body.style.color = &quot;white&quot;;
                                modeText.text = &quot;Dark Mode&quot;;
                            } else {
                                document.body.style.backgroundColor = &quot;white&quot;;
                                document.body.style.color = &quot;black&quot;;
                                modeText.text = &quot;Light Mode&quot;;
                            }
                        }

                        // Attach the handler to watch for the change
                        TkDocument.onChangeDarkMode(updateMode);

                        // Call to update for the current mode
                        updateMode();
                    </code>
                </pre>
            </div>
        </div>

        <div class=""col-md-3"">
            <div class=""imgContainer"">
                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5be6847b4ad313d88c784436471d0f002973cfb811122", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("lightbox", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </div>
        </div>
    </div>

    <hr class=""featurette-divider"">

    <div class=""row featurette"">
        <div class=""col-md-9"">
            <h2 class=""featurette-heading"">Stacks</h2>

            <div class=""featuretteDescription"">
                <p class=""lead"">
                    Layout widgets in a stack.
                </p>

                <p>
                    Now for a more in-depth demo. A fundamental widget in Tamarack is 
                    the <strong>Stack</strong> widget, which is a flexbox container 
                    that exposes useful functionality for laying out child widgets.
                </p>

                <p>
                    This demo also shows the functionality of the <strong>TkButton</strong>
                    widget and the <strong>TkColor</strong> class. 
                </p>

                <p>
                    It creates two stacks, <em>buttonStack</em> and <em>colorStack</em>, adds a button
                    to <em>buttonStack</em> for");
            WriteLiteral(@" each <strong>TkStackDirection</strong> to 
                    change the stack direction of <em>colorStack</em>, then loops through each 
                    hue (0-360), and adds a <strong>TkText</strong> widget representing it to the color stack.
                </p>

                <pre class=""codeContainer"">
                    <code class=""js"">
                        // Declare the layout button stack and add it to the body
                        let buttonStack = new TkStack({
                            parent: &quot;body&quot;,
                            direction: TkStackDirection.FLOW
                        });

                        // Declare the color stack and add it to the body
                        let colorStack = new TkStack({
                            parent: &quot;body&quot;,
                            direction: TkStackDirection.VERTICAL
                        });

                        // Add a button for each stack direction
                        for (let direction in");
            WriteLiteral(@" TkStackDirection) {
                            let button = new TkButton({
                                parent: buttonStack,
                                text: direction,
                                style: &quot;margin: 0.25rem;&quot;
                            });

                            button.on(&quot;click&quot;, () =&gt; colorStack.direction = TkStackDirection[direction]);
                        }

                        // Loop through hues and add text for each one to the colorStack
                        for (let i = 0; i &lt;= 360; i++) {
                            let itemColor = new TkColor(`hsl(${i}, 100%, 50%)`);
                            let stackItem = new TkText(&quot;span&quot;, {
                                parent: colorStack,
                                style: &quot;font-weight: bold; padding: 0.25rem;&quot;
                            });

                            stackItem.style.backgroundColor = itemColor.asHex();
                            stackItem.s");
            WriteLiteral(@"tyle.color = itemColor.isLight() ? &quot;black&quot; : &quot;white&quot;;
                            stackItem.text = itemColor.asHex();
                        }
                    </code>
                </pre>
            </div>
        </div>

        <div class=""col-md-3"">
            <div class=""imgContainer"">
                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5be6847b4ad313d88c784436471d0f002973cfb816047", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("lightbox", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n            </div>\n        </div>\n    </div>\n</div>\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
