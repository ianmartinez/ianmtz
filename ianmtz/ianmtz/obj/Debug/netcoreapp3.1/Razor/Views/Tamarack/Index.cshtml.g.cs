#pragma checksum "C:\Users\ianma\Documents\GitHub\ianmtz\ianmtz\ianmtz\Views\Tamarack\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "33f0f1ea92146bd5722e0bf3e069e43f8ba36580"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Tamarack_Index), @"mvc.1.0.view", @"/Views/Tamarack/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\ianma\Documents\GitHub\ianmtz\ianmtz\ianmtz\Views\_ViewImports.cshtml"
using ianmtz;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\ianma\Documents\GitHub\ianmtz\ianmtz\ianmtz\Views\_ViewImports.cshtml"
using ianmtz.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"33f0f1ea92146bd5722e0bf3e069e43f8ba36580", @"/Views/Tamarack/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"0212b2530db4bb3fbf3367dd79037ccba27f8ce2", @"/Views/_ViewImports.cshtml")]
    public class Views_Tamarack_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/img/Tamarack/Icon.png"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("featurette-image"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/img/Tamarack/HelloWorld.jpg"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/img/Tamarack/CoinToss.gif"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/img/Tamarack/Tabs.gif"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/img/Tamarack/DarkMode.gif"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/img/Tamarack/Stacks.gif"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\ianma\Documents\GitHub\ianmtz\ianmtz\ianmtz\Views\Tamarack\Index.cshtml"
  
    Layout = "_AppLayout";
    ViewData["Title"] = "Tamarack";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
            DefineSection("icon", async() => {
                WriteLiteral("\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "33f0f1ea92146bd5722e0bf3e069e43f8ba365805959", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n");
            }
            );
            WriteLiteral("\r\n");
            DefineSection("description", async() => {
                WriteLiteral(@"
    <div class=""appWarning appWarningWip"">
        <ion-icon name=""construct""></ion-icon>
        <div>
            <strong>Under Development</strong> 
            <span>Some features may be incomplete or contain bugs</span>
        </div>
    </div>

    <p class=""appDescriptionText"">
        A collection of modern, easy to use classes for designing a UI in pure JavaScript. 
    </p>

    <div class=""appButtons"">
        <a class=""btn btn-primary imageButton"" href=""https://github.com/ianmartinez/tamarack"" role=""button"">
            <ion-icon name=""logo-github""></ion-icon><span>GitHub</span>
        </a>
    </div>
");
            }
            );
            WriteLiteral("\r\n");
#nullable restore
#line 30 "C:\Users\ianma\Documents\GitHub\ianmtz\ianmtz\ianmtz\Views\Tamarack\Index.cshtml"
Write(await Html.PartialAsync("~/Views/Shared/_SyntaxHighlighter.cshtml"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"

<div class=""container appFeatures"">
    <div class=""row"">
        <div class=""col-md-12"">
            <h2>Structure</h2>
            <p class=""lead"">Tamarack is made up of 4 scripts:</p>
            <p class=""extendedDescription"">
                <ul>
                    <li><strong>core.js</strong>: Functionality used by all of the other scripts.</li>
                    <li><strong>color.js</strong>: A class to manage nearly every type of CSS color and easily convert between them.</li>
                    <li><strong>font.js</strong>: A class to simplify manage fonts.</li>
                    <li><strong>widget.js</strong>: Contains a collection of widgets which are wrappers around HTML elements that inherit from 
                    a class called <strong><em>TKWidget</em></strong> and can be manipulated entirely through JavaScript, with
                    no HTML boilerplate.</li>
                </ul>
            </p>
        </div>
    </div>
    
    <h1>Demos</h2>

    <div cl");
            WriteLiteral(@"ass=""row featurette"">
        <div class=""col-md-9"">
            <h2 class=""featurette-heading"">Hello world</h2>

            <div class=""featuretteDescription"">
                <p class=""lead"">
                    A simple hello world demo in Tamarack.
                </p>

                <pre class=""codeContainer"">
                    <code class=""js"">
                        new TkText(""h1"", { parent: ""body"", text: ""Hello World!"" });
                    </code>
                </pre>
            </div>
        </div>

        <div class=""col-md-3"">
            <div class=""imgContainer"">
                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "33f0f1ea92146bd5722e0bf3e069e43f8ba365809916", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("lightbox", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </div>
        </div>
    </div>

    <hr class=""featurette-divider"">

    <div class=""row featurette orderFlip"">
        <div class=""col-md-9"">
            <h2 class=""featurette-heading"">Coin toss</h2>

            <div class=""featuretteDescription"">
                <p class=""lead"">
                    Create a button that tosses a coin and prints the result to the screen.
                </p>

                <pre class=""codeContainer"">
                    <code class=""js"">
                        let tossCoinButton = new TkButton({ parent: &quot;body&quot;, text: &quot;Toss Coin&quot; });
                        let results = new TkStack({ parent: &quot;body&quot;, direction: TkStackDirection.VERTICAL });

                        tossCoinButton.on(&quot;click&quot;, () =&gt; {
                            let result = TkArray.random(&quot;Heads&quot;, &quot;Tails&quot;);
                            let resultColor = (result == &quot;Heads&quot;) ? &quot;maroon&quot; : &qu");
            WriteLiteral(@"ot;midnightblue&quot;;
                            let resultText = new TkText(&quot;h2&quot;, { 
                                parent: results, 
                                text: result,
                                style: `color: ${resultColor};`
                            });
                        });
                    </code>
                </pre>
            </div>
        </div>

        <div class=""col-md-3"">
            <div class=""imgContainer"">
                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "33f0f1ea92146bd5722e0bf3e069e43f8ba3658012917", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("lightbox", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </div>
        </div>
    </div>

    <hr class=""featurette-divider"">

    <div class=""row featurette"">
        <div class=""col-md-9"">
            <h2 class=""featurette-heading"">Tabs</h2>

            <div class=""featuretteDescription"">
                <p class=""lead"">
                    Managing a notebook with tabs is a fairly common task when developing an application, but it can
                    quickly become a hassle using only plain HTML and JavaScript. With Tamarack, it can be done 
                    entirely in JavaScript, without any boilerplate.
                </p>

                <p class=""extendedDescription"">
                    A <strong>TkNotebook</strong> is a widget containing pages that contains useful functions and properties
                    for managing pages. It also includes events such as <em>changepage</em>, <em>addpage</em>,
                    and <em>removepage</em> that you can add event handlers to in order to deal with changes in the");
            WriteLiteral(@" notebook.
                </p>
                
                <p class=""extendedDescription"">
                   Each page in a notebook is represented by a <strong>TkNotebookPage</strong>, which includes a tab 
                   button and a content panel.
                </p>

                <pre class=""codeContainer"">
                    <code class=""js"">
                        // Declare widgets
                        let buttonStack = new TkStack({ parent: &quot;body&quot;, direction: TkStackDirection.FLOW });
                        let previousPageButton = new TkButton({ parent: buttonStack, text: &quot;&lt;&quot; });
                        let nextPageButton = new TkButton({ parent: buttonStack, text: &quot;&gt;&quot; });
                        let addPageButton = new TkButton({ parent: buttonStack, text: &quot;Add&quot; });
                        let removePageButton = new TkButton({ parent: buttonStack, text: &quot;Remove&quot; });
                        let selectedPageTe");
            WriteLiteral(@"xt = new TkText(&quot;h2&quot;, { parent: &quot;body&quot;, style: &quot;margin: 1rem 0;&quot; });
                        let notebook = new TkNotebook({ parent: &quot;body&quot; });

                        // Keep track of the pages added
                        let pageCount = 0;

                        // Attach button event handlers
                        previousPageButton.on(&quot;click&quot;, () =&gt; notebook.goToPrevious());
                        nextPageButton.on(&quot;click&quot;, () =&gt; notebook.goToNext());
                        addPageButton.on(&quot;click&quot;, () =&gt; {
                            notebook.add(new TkNotebookPage({
                                title: `Tab ${++pageCount}`,
                                content: [new TkText(&quot;h2&quot;, { text: `Content ${pageCount}` })]
                            }));
                        });
                        removePageButton.on(&quot;click&quot;, () =&gt; {
                            if (notebook.");
            WriteLiteral(@"active !== null)
                                notebook.remove(notebook.active);
                        });

                        // Update the selected page text when the current page is changed
                        notebook.on(&quot;activechanged&quot;, () =&gt; {
                            selectedPageText.text = (notebook.active != null) ? notebook.active.title : &quot;&quot;;
                        });
                    </code>
                </pre>
            </div>
        </div>

        <div class=""col-md-3"">
            <div class=""imgContainer"">
                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "33f0f1ea92146bd5722e0bf3e069e43f8ba3658018140", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("lightbox", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </div>
        </div>
    </div>

    <hr class=""featurette-divider"">

    <div class=""row featurette orderFlip"">
        <div class=""col-md-9"">
            <h2 class=""featurette-heading"">Detect dark mode</h2>

            <div class=""featuretteDescription"">
                <p class=""lead"">
                    Easily add event handlers to watch for switches between light
                    and dark mode.
                </p>

                <pre class=""codeContainer"">
                    <code class=""js"">
                        // Insert a text element into &lt;body&gt;
                        let modeText = new TkText(&quot;h1&quot;, { parent: &quot;body&quot; });

                        // Update the text and document colors when the system is 
                        // switched between dark and light mode
                        function updateMode() {
                            if (TkDocument.isInDarkMode()) {
                                document.body.style");
            WriteLiteral(@".backgroundColor = &quot;black&quot;;
                                document.body.style.color = &quot;white&quot;;
                                modeText.text = &quot;Dark Mode&quot;;
                            } else {
                                document.body.style.backgroundColor = &quot;white&quot;;
                                document.body.style.color = &quot;black&quot;;
                                modeText.text = &quot;Light Mode&quot;;
                            }
                        }

                        // Attach the handler to watch for the change
                        TkDocument.onChangeDarkMode(updateMode);

                        // Call to update for the current mode
                        updateMode();
                    </code>
                </pre>
            </div>
        </div>

        <div class=""col-md-3"">
            <div class=""imgContainer"">
                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "33f0f1ea92146bd5722e0bf3e069e43f8ba3658021591", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("lightbox", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </div>
        </div>
    </div>

    <hr class=""featurette-divider"">

    <div class=""row featurette"">
        <div class=""col-md-9"">
            <h2 class=""featurette-heading"">Stacks</h2>

            <div class=""featuretteDescription"">
                <p class=""lead"">
                    Layout widgets in a stack.
                </p>

                <p>
                    A fundamental widget in Tamarack is the <strong>Stack</strong> widget, 
                    which is a flexbox container that exposes useful functionality for laying 
                    out child widgets.
                </p>

                <p>
                    It creates two stacks, <em>buttonStack</em> and <em>colorStack</em>, adds a button
                    to <em>buttonStack</em> for each <strong>TkStackDirection</strong> to 
                    change the stack direction of <em>colorStack</em>, then loops through each 
                    hue (0-360), and adds a <strong>TkText</strong");
            WriteLiteral(@"> widget representing it to the color stack.
                </p>

                <pre class=""codeContainer"">
                    <code class=""js"">
                        // Declare the layout button stack and add it to the body
                        let buttonStack = new TkStack({
                            parent: &quot;body&quot;,
                            direction: TkStackDirection.FLOW
                        });

                        // Declare the color stack and add it to the body
                        let colorStack = new TkStack({
                            parent: &quot;body&quot;,
                            direction: TkStackDirection.VERTICAL
                        });

                        // Add a button for each stack direction
                        for (let direction in TkStackDirection) {
                            let button = new TkButton({
                                parent: buttonStack,
                                text: direction,
     ");
            WriteLiteral(@"                           style: &quot;margin: 0.25rem;&quot;
                            });

                            button.on(&quot;click&quot;, () =&gt; colorStack.direction = TkStackDirection[direction]);
                        }

                        // Loop through hues and add text for each one to the colorStack
                        for (let i = 0; i &lt;= 360; i++) {
                            let itemColor = new TkColor(`hsl(${i}, 100%, 50%)`);
                            let stackItem = new TkText(&quot;span&quot;, {
                                parent: colorStack,
                                style: &quot;font-weight: bold; padding: 0.25rem;&quot;
                            });

                            stackItem.style.backgroundColor = itemColor.asHex();
                            stackItem.style.color = itemColor.isLight() ? &quot;black&quot; : &quot;white&quot;;
                            stackItem.text = itemColor.asHex();
                        }
  ");
            WriteLiteral("                  </code>\r\n                </pre>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"col-md-3\">\r\n            <div class=\"imgContainer\">\r\n                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "33f0f1ea92146bd5722e0bf3e069e43f8ba3658026391", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("lightbox", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
